// Code generated by MockGen. DO NOT EDIT.
// Source: categoriesRepo.go

// Package mock_repository is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	repository "github.com/metalscreame/GoToBoox/src/dataBase/repository"
	reflect "reflect"
)

// MockCategoryRepository is a mock of CategoryRepository interface
type MockCategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryRepositoryMockRecorder
}

// MockCategoryRepositoryMockRecorder is the mock recorder for MockCategoryRepository
type MockCategoryRepositoryMockRecorder struct {
	mock *MockCategoryRepository
}

// NewMockCategoryRepository creates a new mock instance
func NewMockCategoryRepository(ctrl *gomock.Controller) *MockCategoryRepository {
	mock := &MockCategoryRepository{ctrl: ctrl}
	mock.recorder = &MockCategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCategoryRepository) EXPECT() *MockCategoryRepositoryMockRecorder {
	return m.recorder
}

// GetAllCategories mocks base method
func (m *MockCategoryRepository) GetAllCategories() ([]repository.Categories, error) {
	ret := m.ctrl.Call(m, "GetAllCategories")
	ret0, _ := ret[0].([]repository.Categories)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategories indicates an expected call of GetAllCategories
func (mr *MockCategoryRepositoryMockRecorder) GetAllCategories() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategories", reflect.TypeOf((*MockCategoryRepository)(nil).GetAllCategories))
}
