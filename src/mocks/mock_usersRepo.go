// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/metalscreame/GoToBoox/src/dataBase/repository (interfaces: UserRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	repository "github.com/metalscreame/GoToBoox/src/dataBase/repository"
	reflect "reflect"
)

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// ClearReturningBookIDByEmail mocks base method
func (m *MockUserRepository) ClearReturningBookIDByEmail(arg0 string) error {
	ret := m.ctrl.Call(m, "ClearReturningBookIDByEmail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearReturningBookIDByEmail indicates an expected call of ClearReturningBookIDByEmail
func (mr *MockUserRepositoryMockRecorder) ClearReturningBookIDByEmail(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearReturningBookIDByEmail", reflect.TypeOf((*MockUserRepository)(nil).ClearReturningBookIDByEmail), arg0)
}

// DeleteUserByEmail mocks base method
func (m *MockUserRepository) DeleteUserByEmail(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteUserByEmail", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByEmail indicates an expected call of DeleteUserByEmail
func (mr *MockUserRepositoryMockRecorder) DeleteUserByEmail(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).DeleteUserByEmail), arg0)
}

// GetAllUsers mocks base method
func (m *MockUserRepository) GetAllUsers() ([]repository.User, error) {
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers
func (mr *MockUserRepositoryMockRecorder) GetAllUsers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUserRepository)(nil).GetAllUsers))
}

// GetRoleByEmail mocks base method
func (m *MockUserRepository) GetRoleByEmail(arg0 string) (repository.User, error) {
	ret := m.ctrl.Call(m, "GetRoleByEmail", arg0)
	ret0, _ := ret[0].(repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByEmail indicates an expected call of GetRoleByEmail
func (mr *MockUserRepositoryMockRecorder) GetRoleByEmail(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetRoleByEmail), arg0)
}

// GetUserByEmail mocks base method
func (m *MockUserRepository) GetUserByEmail(arg0 string) (repository.User, error) {
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0)
	ret0, _ := ret[0].(repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail
func (mr *MockUserRepositoryMockRecorder) GetUserByEmail(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetUserByEmail), arg0)
}

// GetUsersEmailToNotifyNewBook mocks base method
func (m *MockUserRepository) GetUsersEmailToNotifyNewBook() ([]repository.User, error) {
	ret := m.ctrl.Call(m, "GetUsersEmailToNotifyNewBook")
	ret0, _ := ret[0].([]repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersEmailToNotifyNewBook indicates an expected call of GetUsersEmailToNotifyNewBook
func (mr *MockUserRepositoryMockRecorder) GetUsersEmailToNotifyNewBook() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersEmailToNotifyNewBook", reflect.TypeOf((*MockUserRepository)(nil).GetUsersEmailToNotifyNewBook))
}

// GetUsersEmailToNotifyReserved mocks base method
func (m *MockUserRepository) GetUsersEmailToNotifyReserved() ([]repository.User, error) {
	ret := m.ctrl.Call(m, "GetUsersEmailToNotifyReserved")
	ret0, _ := ret[0].([]repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersEmailToNotifyReserved indicates an expected call of GetUsersEmailToNotifyReserved
func (mr *MockUserRepositoryMockRecorder) GetUsersEmailToNotifyReserved() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersEmailToNotifyReserved", reflect.TypeOf((*MockUserRepository)(nil).GetUsersEmailToNotifyReserved))
}

// InsertRolesToUsers mocks base method
func (m *MockUserRepository) InsertRolesToUsers(arg0, arg1 int) error {
	ret := m.ctrl.Call(m, "InsertRolesToUsers", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRolesToUsers indicates an expected call of InsertRolesToUsers
func (mr *MockUserRepositoryMockRecorder) InsertRolesToUsers(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRolesToUsers", reflect.TypeOf((*MockUserRepository)(nil).InsertRolesToUsers), arg0, arg1)
}

// InsertUser mocks base method
func (m *MockUserRepository) InsertUser(arg0 repository.User) (int, error) {
	ret := m.ctrl.Call(m, "InsertUser", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser
func (mr *MockUserRepositoryMockRecorder) InsertUser(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserRepository)(nil).InsertUser), arg0)
}

// MakeBookCross mocks base method
func (m *MockUserRepository) MakeBookCross(arg0 string) error {
	ret := m.ctrl.Call(m, "MakeBookCross", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeBookCross indicates an expected call of MakeBookCross
func (mr *MockUserRepositoryMockRecorder) MakeBookCross(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeBookCross", reflect.TypeOf((*MockUserRepository)(nil).MakeBookCross), arg0)
}

// SetReturningBookIDByEmail mocks base method
func (m *MockUserRepository) SetReturningBookIDByEmail(arg0 int, arg1 string) error {
	ret := m.ctrl.Call(m, "SetReturningBookIDByEmail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReturningBookIDByEmail indicates an expected call of SetReturningBookIDByEmail
func (mr *MockUserRepositoryMockRecorder) SetReturningBookIDByEmail(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReturningBookIDByEmail", reflect.TypeOf((*MockUserRepository)(nil).SetReturningBookIDByEmail), arg0, arg1)
}

// SetUsersBookAsNullByBookId mocks base method
func (m *MockUserRepository) SetUsersBookAsNullByBookId(arg0 int) error {
	ret := m.ctrl.Call(m, "SetUsersBookAsNullByBookId", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUsersBookAsNullByBookId indicates an expected call of SetUsersBookAsNullByBookId
func (mr *MockUserRepositoryMockRecorder) SetUsersBookAsNullByBookId(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUsersBookAsNullByBookId", reflect.TypeOf((*MockUserRepository)(nil).SetUsersBookAsNullByBookId), arg0)
}

// UpdateUserByEmail mocks base method
func (m *MockUserRepository) UpdateUserByEmail(arg0 repository.User, arg1 string) error {
	ret := m.ctrl.Call(m, "UpdateUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserByEmail indicates an expected call of UpdateUserByEmail
func (mr *MockUserRepositoryMockRecorder) UpdateUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserByEmail), arg0, arg1)
}
