package mocks

import (
	"github.com/golang/mock/gomock"
	"github.com/metalscreame/GoToBoox/src/dataBase/repository"
	"reflect"
)

// Code generated by MockGen. DO NOT EDIT.
// Source: src/database/repository/usersRepo.go

// Package mocks is a generated GoMock package.

// MockUserRepository is a mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// GetUserByEmail mocks base method
func (m *MockUserRepository) GetUserByEmail(email string) (repository.User, error) {
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(repository.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail
func (mr *MockUserRepositoryMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetUserByEmail), email)
}

// UpdateUserByEmail mocks base method
func (m *MockUserRepository) UpdateUserByEmail(u repository.User, email string) error {
	ret := m.ctrl.Call(m, "UpdateUserByEmail", u, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserByEmail indicates an expected call of UpdateUserByEmail
func (mr *MockUserRepositoryMockRecorder) UpdateUserByEmail(u, email interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserByEmail), u, email)
}

// DeleteUserByEmail mocks base method
func (m *MockUserRepository) DeleteUserByEmail(email string) error {
	ret := m.ctrl.Call(m, "DeleteUserByEmail", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByEmail indicates an expected call of DeleteUserByEmail
func (mr *MockUserRepositoryMockRecorder) DeleteUserByEmail(email interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).DeleteUserByEmail), email)
}

// InsertUser mocks base method
func (m *MockUserRepository) InsertUser(u repository.User) error {
	ret := m.ctrl.Call(m, "InsertUser", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser
func (mr *MockUserRepositoryMockRecorder) InsertUser(u interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserRepository)(nil).InsertUser), u)
}
