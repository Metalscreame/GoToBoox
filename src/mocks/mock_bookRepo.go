// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/metalscreame/GoToBoox/src/dataBase/repository (interfaces: BookRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	repository "github.com/metalscreame/GoToBoox/src/dataBase/repository"
	reflect "reflect"
)

// MockBookRepository is a mock of BookRepository interface
type MockBookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookRepositoryMockRecorder
}

// MockBookRepositoryMockRecorder is the mock recorder for MockBookRepository
type MockBookRepositoryMockRecorder struct {
	mock *MockBookRepository
}

// NewMockBookRepository creates a new mock instance
func NewMockBookRepository(ctrl *gomock.Controller) *MockBookRepository {
	mock := &MockBookRepository{ctrl: ctrl}
	mock.recorder = &MockBookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBookRepository) EXPECT() *MockBookRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockBookRepository) GetAll() ([]repository.Book, error) {
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]repository.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockBookRepositoryMockRecorder) GetAll() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockBookRepository)(nil).GetAll))
}

// GetAllTakenBooks mocks base method
func (m *MockBookRepository) GetAllTakenBooks() ([]repository.Book, error) {
	ret := m.ctrl.Call(m, "GetAllTakenBooks")
	ret0, _ := ret[0].([]repository.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTakenBooks indicates an expected call of GetAllTakenBooks
func (mr *MockBookRepositoryMockRecorder) GetAllTakenBooks() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTakenBooks", reflect.TypeOf((*MockBookRepository)(nil).GetAllTakenBooks))
}

// GetByCategory mocks base method
func (m *MockBookRepository) GetByCategory(arg0 int) ([]repository.Book, error) {
	ret := m.ctrl.Call(m, "GetByCategory", arg0)
	ret0, _ := ret[0].([]repository.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCategory indicates an expected call of GetByCategory
func (mr *MockBookRepositoryMockRecorder) GetByCategory(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCategory", reflect.TypeOf((*MockBookRepository)(nil).GetByCategory), arg0)
}

// GetByID mocks base method
func (m *MockBookRepository) GetByID(arg0 int) (repository.Book, error) {
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(repository.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockBookRepositoryMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBookRepository)(nil).GetByID), arg0)
}

// GetByLikeName mocks base method
func (m *MockBookRepository) GetByLikeName(arg0 string) ([]repository.Book, error) {
	ret := m.ctrl.Call(m, "GetByLikeName", arg0)
	ret0, _ := ret[0].([]repository.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLikeName indicates an expected call of GetByLikeName
func (mr *MockBookRepositoryMockRecorder) GetByLikeName(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLikeName", reflect.TypeOf((*MockBookRepository)(nil).GetByLikeName), arg0)
}

// GetByTagsAndRating mocks base method
func (m *MockBookRepository) GetByTagsAndRating(arg0 []string, arg1 []int) ([]repository.Book, error) {
	ret := m.ctrl.Call(m, "GetByTagsAndRating", arg0, arg1)
	ret0, _ := ret[0].([]repository.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTagsAndRating indicates an expected call of GetByTagsAndRating
func (mr *MockBookRepositoryMockRecorder) GetByTagsAndRating(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTagsAndRating", reflect.TypeOf((*MockBookRepository)(nil).GetByTagsAndRating), arg0, arg1)
}

// GetMostPopularBooks mocks base method
func (m *MockBookRepository) GetMostPopularBooks(arg0 int) ([]repository.Book, error) {
	ret := m.ctrl.Call(m, "GetMostPopularBooks", arg0)
	ret0, _ := ret[0].([]repository.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostPopularBooks indicates an expected call of GetMostPopularBooks
func (mr *MockBookRepositoryMockRecorder) GetMostPopularBooks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostPopularBooks", reflect.TypeOf((*MockBookRepository)(nil).GetMostPopularBooks), arg0)
}

// GetTagsForBook mocks base method
func (m *MockBookRepository) GetTagsForBook(arg0 int) ([]repository.Book, error) {
	ret := m.ctrl.Call(m, "GetTagsForBook", arg0)
	ret0, _ := ret[0].([]repository.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagsForBook indicates an expected call of GetTagsForBook
func (mr *MockBookRepositoryMockRecorder) GetTagsForBook(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagsForBook", reflect.TypeOf((*MockBookRepository)(nil).GetTagsForBook), arg0)
}

// InsertNewBook mocks base method
func (m *MockBookRepository) InsertNewBook(arg0 repository.Book) (int, error) {
	ret := m.ctrl.Call(m, "InsertNewBook", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertNewBook indicates an expected call of InsertNewBook
func (mr *MockBookRepositoryMockRecorder) InsertNewBook(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertNewBook", reflect.TypeOf((*MockBookRepository)(nil).InsertNewBook), arg0)
}

// InsertTags mocks base method
func (m *MockBookRepository) InsertTags(arg0, arg1 int) error {
	ret := m.ctrl.Call(m, "InsertTags", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTags indicates an expected call of InsertTags
func (mr *MockBookRepositoryMockRecorder) InsertTags(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTags", reflect.TypeOf((*MockBookRepository)(nil).InsertTags), arg0, arg1)
}

// UpdateBookState mocks base method
func (m *MockBookRepository) UpdateBookState(arg0 int, arg1 string) error {
	ret := m.ctrl.Call(m, "UpdateBookState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBookState indicates an expected call of UpdateBookState
func (mr *MockBookRepositoryMockRecorder) UpdateBookState(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookState", reflect.TypeOf((*MockBookRepository)(nil).UpdateBookState), arg0, arg1)
}

// UpdateBookStateAndUsersBookIDByUserEmail mocks base method
func (m *MockBookRepository) UpdateBookStateAndUsersBookIDByUserEmail(arg0, arg1 string, arg2 int) error {
	ret := m.ctrl.Call(m, "UpdateBookStateAndUsersBookIDByUserEmail", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBookStateAndUsersBookIDByUserEmail indicates an expected call of UpdateBookStateAndUsersBookIDByUserEmail
func (mr *MockBookRepositoryMockRecorder) UpdateBookStateAndUsersBookIDByUserEmail(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookStateAndUsersBookIDByUserEmail", reflect.TypeOf((*MockBookRepository)(nil).UpdateBookStateAndUsersBookIDByUserEmail), arg0, arg1, arg2)
}
